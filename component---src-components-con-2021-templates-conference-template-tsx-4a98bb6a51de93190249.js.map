{"version":3,"sources":["webpack:///./src/components/con/2021/utils.tsx","webpack:///./src/components/con/2021/templates/ConferenceTemplate.tsx","webpack:///./src/components/con/2021/common/Button.tsx","webpack:///./src/components/con/2021/data/tracks.ts"],"names":["sortByStartDate","conference1","conference2","date1","start","dayjs","date2","isBefore","isAfter","convertTime","time","format","isMorningTime","parseInt","split","ConferenceTemplate","pageContext","location","html","title","speakerIds","speakers","trackID","track","end","useSpeakers","tracks","find","t","id","className","dark","lined","h1","small","length","type","classNames","minified","map","speaker","Fragment","key","name","hoverable","social","size","to","slug","dangerouslySetInnerHTML","__html","Button","children","empty","disabled","props","button","classnames","date"],"mappings":"8FAAA,+HAGaA,EAAoF,SAC/FC,EACAC,GAEA,IAAMC,EAAQF,EAAYG,MAAQC,IAAM,cAAcJ,EAAYG,OAAWC,MACvEC,EAAQJ,EAAYE,MAAQC,IAAM,cAAcH,EAAYE,OAAWC,MAC7E,OAAIF,EAAMI,SAASD,IAAgB,EAC/BH,EAAMK,QAAQF,GAAe,EAC1B,GAGIG,EAAwC,SAACC,GAAD,OAAUL,IAAM,cAAcK,GAAQC,OAAO,YAErFC,EAA2C,SAACF,GAAD,OAAU,IAAMG,SAASH,EAAKI,MAAM,KAAK,GAAI,M,oCChBrG,yIAqEeC,UA/C0D,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC/EC,EAAkEF,EAAlEE,KAAMC,EAA4DH,EAA5DG,MAAiBC,EAA2CJ,EAArDK,SAA6BC,EAAwBN,EAA/BO,MAAgBnB,EAAeY,EAAfZ,MAAOoB,EAAQR,EAARQ,IAC5DH,EAAWI,YAAYL,GACvBG,EAAQG,IAAOC,MAAK,SAACC,GAAD,OAAOA,EAAEC,KAAOP,KAE1C,OACE,kBAAC,IAAD,CAAQL,SAAUA,GAChB,yBAAKa,UAAU,oBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,sBACb,kBAAC,IAAD,CAAcC,MAAI,EAACC,OAAK,EAACC,IAAE,EAACC,MAAO,GAAKf,EAAMgB,QAC5C,gCAAShB,IAEVI,EACC,oCACE,uBAAGO,UAAU,6BACX,0CAAmBP,EAAMM,GAAzB,KADF,KAEQN,EAAMa,MAEd,uBAAGN,UAAU,gBACVN,GAAOpB,EAAP,wBAAuCK,YAAYL,GAAnD,MAA+DK,YAAYe,GAAS,iBAGvF,MAEN,yBAAKM,UAAU,uBACb,yBAAKA,UAAWO,IAAW,sBAAuB,CAAEC,SAAU,EAAIjB,EAASc,UACxEd,EAASkB,KAAI,SAACC,GAAD,OACZ,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,EAAQG,MAC3B,kBAAC,IAAD,CAAeH,QAASA,EAASI,WAAW,EAAOC,QAAQ,IAC3D,kBAAC,IAAD,CAAQf,UAAU,eAAegB,KAAK,QAAQC,GAAIP,EAAQQ,MAA1D,4BAMN,yBACElB,UAAU,mDACVmB,wBAAyB,CAAEC,OAAQhC,W,wGC/BlCiC,IAjBkC,SAAC,GAQ5C,IAPJC,EAOI,EAPJA,SACAtB,EAMI,EANJA,UACAuB,EAKI,EALJA,MACAC,EAII,EAJJA,SACAP,EAGI,EAHJA,GAGI,IAFJD,YAEI,MAFG,QAEH,EADDS,EACC,uEACEC,EACJ,uCAAK1B,UAAW2B,IAAW,eAAgB,CAAEvB,MAAO,UAAYY,EAAMO,QAAOC,YAAYxB,IAAgByB,GACtGH,GAGL,OAAOL,EAAK,kBAAC,OAAD,CAAMA,GAAIA,GAAKS,GAAiBA,I,kCCX/B9B,IAbS,CACtB,CACEG,GAAI,KACJO,KAAM,yBACNsB,KAAM,gBAER,CACE7B,GAAI,KACJO,KAAM,wBACNsB,KAAM","file":"component---src-components-con-2021-templates-conference-template-tsx-4a98bb6a51de93190249.js","sourcesContent":["import dayjs from 'dayjs';\nimport { Conference } from './types';\n\nexport const sortByStartDate: (conference1: Conference, conference2: Conference) => 1 | -1 | 0 = (\n  conference1,\n  conference2\n) => {\n  const date1 = conference1.start ? dayjs(`2021-09-10T${conference1.start}`) : dayjs();\n  const date2 = conference2.start ? dayjs(`2021-09-10T${conference2.start}`) : dayjs();\n  if (date1.isBefore(date2)) return -1;\n  if (date1.isAfter(date2)) return 1;\n  return 0;\n};\n\nexport const convertTime: (time: string) => string = (time) => dayjs(`2021-09-10T${time}`).format('HH:mm A');\n\nexport const isMorningTime: (time: string) => boolean = (time) => 12 >= parseInt(time.split(':')[0], 10);\n","import React from 'react';\nimport Layout from '@components/con/2021/layout';\nimport SectionTitle from '@components/con/2021/common/SectionTitle';\nimport { PageProps } from 'gatsby';\nimport classNames from 'classnames';\nimport tracks from '../data/tracks';\nimport Button from '../common/Button';\nimport SpeakerCircle from '../Speakers/SpeakerCircle';\nimport { convertTime } from '../utils';\nimport useSpeakers from '../hooks/useSpeakers';\n\ninterface ConferenceTemplateProps extends PageProps {\n  pageContext: {\n    html: string;\n    title: string;\n    speakers: string[];\n    track: 'FR' | 'EN';\n    start: string;\n    end: string;\n  };\n}\n\nconst ConferenceTemplate: React.ComponentType<ConferenceTemplateProps> = ({ pageContext, location }) => {\n  const { html, title, speakers: speakerIds, track: trackID, start, end } = pageContext;\n  const speakers = useSpeakers(speakerIds);\n  const track = tracks.find((t) => t.id === trackID);\n\n  return (\n    <Layout location={location}>\n      <div className=\"conf__conference\">\n        <div className=\"container\">\n          <div className=\"conference__header\">\n            <SectionTitle dark lined h1 small={50 < title.length}>\n              <strong>{title}</strong>\n            </SectionTitle>\n            {track ? (\n              <>\n                <p className=\"overline header__subtitle\">\n                  <strong>{`Track #${track.id} `}</strong>\n                  {`- ${track.type}`}\n                </p>\n                <p className=\"header__date\">\n                  {end && start ? `September, 10 2021 Â· ${convertTime(start)} - ${convertTime(end)}` : 'Sep, 10 2021'}\n                </p>\n              </>\n            ) : null}\n          </div>\n          <div className=\"conference__content\">\n            <div className={classNames('conference__speaker', { minified: 1 < speakers.length })}>\n              {speakers.map((speaker) => (\n                <React.Fragment key={speaker.name}>\n                  <SpeakerCircle speaker={speaker} hoverable={false} social={false} />\n                  <Button className=\"white square\" size=\"small\" to={speaker.slug}>\n                    See speaker details\n                  </Button>\n                </React.Fragment>\n              ))}\n            </div>\n            <div\n              className=\"conference__abstract dotted-corner corner-bottom\"\n              dangerouslySetInnerHTML={{ __html: html }}\n            />\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default ConferenceTemplate;\n","import React from 'react';\nimport classnames from 'classnames';\nimport { Link } from 'gatsby';\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLDivElement> {\n  size?: 'small' | 'large';\n  className?: string;\n  empty?: boolean;\n  disabled?: boolean;\n  to?: string;\n}\n\nconst Button: React.ComponentType<ButtonProps> = ({\n  children,\n  className,\n  empty,\n  disabled,\n  to,\n  size = 'large',\n  ...props\n}) => {\n  const button = (\n    <div className={classnames('conf__button', { small: 'small' === size, empty, disabled }, className)} {...props}>\n      {children}\n    </div>\n  );\n  return to ? <Link to={to}>{button}</Link> : button;\n};\n\nexport default Button;\n","import { Track } from '../types';\n\nconst tracks: Track[] = [\n  {\n    id: 'EN',\n    type: 'English-speaking track',\n    date: '10 sep, 2021',\n  },\n  {\n    id: 'FR',\n    type: 'French-speaking track',\n    date: '10 sep, 2021',\n  },\n];\n\nexport default tracks;\n"],"sourceRoot":""}