{"version":3,"sources":["webpack:///./src/components/con/2021/utils.tsx","webpack:///./src/components/con/2021/templates/SpeakerTemplate.tsx","webpack:///./src/components/con/2021/hooks/useConferences.tsx","webpack:///./src/components/con/2021/data/tracks.ts","webpack:///./src/components/con/2021/Speakers/SpeakerSocialList.tsx","webpack:///./src/components/con/2021/common/SectionTitle.tsx"],"names":["sortByStartDate","conference1","conference2","date1","start","dayjs","date2","isBefore","isAfter","convertTime","time","format","isMorningTime","parseInt","split","SpeakerConferenceSlot","conference","track","tracks","find","t","id","end","title","slug","short","className","type","size","to","SpeakerTemplate","pageContext","location","name","job","description","conferences","useConferences","data","useStaticQuery","image","getImage","allFile","nodes","filter","imageData","firstname","dark","lined","h1","alt","dangerouslySetInnerHTML","__html","speaker","length","map","withBreaks","allMarkdownRemark","conferenceData","frontmatter","speakers","includes","headings","value","fields","breaks","date","SpeakerSocialList","github","twitter","href","target","rel","SectionTitle","children","small","classnames"],"mappings":"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","file":"component---src-components-con-2021-templates-speaker-template-tsx-d2485e87ea4ccaa847f7.js","sourcesContent":["import dayjs from 'dayjs';\nimport { Conference } from './types';\n\nexport const sortByStartDate: (conference1: Conference, conference2: Conference) => 1 | -1 | 0 = (\n  conference1,\n  conference2\n) => {\n  const date1 = conference1.start ? dayjs(`2021-09-10T${conference1.start}`) : dayjs();\n  const date2 = conference2.start ? dayjs(`2021-09-10T${conference2.start}`) : dayjs();\n  if (date1.isBefore(date2)) return -1;\n  if (date1.isAfter(date2)) return 1;\n  return 0;\n};\n\nexport const convertTime: (time: string) => string = (time) => dayjs(`2021-09-10T${time}`).format('HH:mm A');\n\nexport const isMorningTime: (time: string) => boolean = (time) => 12 >= parseInt(time.split(':')[0], 10);\n","import React from 'react';\nimport Layout from '@components/con/2021/layout';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\nimport SectionTitle from '@components/con/2021/common/SectionTitle';\nimport { PageProps, useStaticQuery, graphql } from 'gatsby';\nimport { convertTime } from '../utils';\nimport Button from '../common/Button';\nimport { Conference, Speaker } from '../types';\nimport SpeakerSocialList from '../Speakers/SpeakerSocialList';\nimport useConferences from '../hooks/useConferences';\nimport tracks from '../data/tracks';\n\nexport const SpeakerConferenceSlot: React.ComponentType<{ conference: Conference }> = ({ conference }) => {\n  const track = tracks.find((t) => t.id === conference.track);\n  const { start, end, title, slug, short } = conference;\n  return (\n    <div className=\"speaker__conference-slot dotted-corner\">\n      <div className=\"conference__track\">\n        <span className=\"h6\">{`Track #${track.id}`}</span>\n        <span className=\"overline\">{track.type}</span>\n      </div>\n      <div className=\"conference__content\">\n        <span className=\"overline\">\n          {start && end ? `Sep, 10 2021 Â· ${convertTime(start)} - ${convertTime(end)}` : 'Sep, 10 2021'}\n        </span>\n        <h3 className=\"h6 lined lined-left\">{title}</h3>\n        <p>{short}</p>\n        <Button className=\"square\" size=\"small\" to={slug}>\n          See details\n        </Button>\n      </div>\n    </div>\n  );\n};\n\ninterface SpeakerTemplateProps extends PageProps {\n  pageContext: Speaker;\n}\n\nconst SpeakerTemplate: React.ComponentType<SpeakerTemplateProps> = ({ pageContext, location }) => {\n  const { id, name, job, description } = pageContext;\n  const conferences = useConferences(id);\n  const data = useStaticQuery(graphql`\n    query {\n      allFile(filter: { sourceInstanceName: { eq: \"speakersImages\" } }) {\n        nodes {\n          name\n          childImageSharp {\n            gatsbyImageData(width: 400, placeholder: DOMINANT_COLOR)\n          }\n        }\n      }\n    }\n  `);\n  const image = getImage(data.allFile.nodes.filter((imageData) => imageData.name === id)?.[0]);\n  const firstname = name.split(' ')[0];\n\n  return (\n    <Layout location={location}>\n      <div className=\"conf__speaker-profile\">\n        <div className=\"speaker__header\">\n          <SectionTitle dark lined h1>\n            <strong>{name}</strong>\n          </SectionTitle>\n          <div className=\"overline speaker__job\">{job}</div>\n        </div>\n        <div className=\"container\">\n          <div className=\"speaker__about\">\n            <div className=\"speaker__picture\">\n              <div className=\"circle__effect\">\n                <GatsbyImage image={image} className=\"circle__picture\" alt={name} />\n              </div>\n            </div>\n            <div className=\"speaker__details\">\n              <div dangerouslySetInnerHTML={{ __html: description }} />\n              <SpeakerSocialList speaker={pageContext} />\n            </div>\n            {0 < conferences.length ? (\n              <div className=\"speaker__schedule\">\n                <h2 className=\"schedule__title h5\">{`${firstname}'s schedule`}</h2>\n                {conferences.map((conference) => (\n                  <SpeakerConferenceSlot conference={conference} />\n                ))}\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default SpeakerTemplate;\n","import { useStaticQuery, graphql } from 'gatsby';\nimport { Conference } from '../types';\n\nconst useConferences: (speaker?: string, withBreaks?: boolean) => Conference[] = (speaker, withBreaks) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(limit: 1000, filter: { frontmatter: { type: { eq: \"conference\" } } }) {\n        nodes {\n          frontmatter {\n            title\n            speakers\n            track\n            start\n            end\n            short\n            github\n          }\n          headings(depth: h1) {\n            value\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  `);\n  const conferences = data.allMarkdownRemark.nodes\n    .filter((conferenceData) => !speaker || conferenceData.frontmatter.speakers.includes(speaker))\n    .map((conference) => ({\n      ...conference.frontmatter,\n      title: conference.headings?.[0].value,\n      slug: conference.fields.slug,\n    }));\n\n  const breaks = withBreaks\n    ? [\n        {\n          title: 'Welcome speech',\n          start: '09:00',\n          end: '09:10',\n          track: 'EN',\n        },\n        {\n          title: 'Morning break',\n          start: '10:35',\n          end: '11:00',\n        },\n        {\n          title: 'Lunch break',\n          start: '12:25',\n          end: '14:00',\n        },\n        {\n          title: 'Afternoon break',\n          start: '16:10',\n          end: '16:25',\n          track: 'EN',\n        },\n      ]\n    : [];\n\n  return [...conferences, ...breaks];\n};\n\nexport default useConferences;\n","import { Track } from '../types';\n\nconst tracks: Track[] = [\n  {\n    id: 'EN',\n    type: 'English-speaking track',\n    date: '10 sep, 2021',\n  },\n  {\n    id: 'FR',\n    type: 'French-speaking track',\n    date: '10 sep, 2021',\n  },\n];\n\nexport default tracks;\n","import React from 'react';\nimport { Speaker } from '../types';\n\ninterface SpeakerSocialListProps {\n  speaker: Speaker;\n}\n\nconst SpeakerSocialList: React.ComponentType<SpeakerSocialListProps> = ({ speaker }) => {\n  const { github, twitter } = speaker;\n  return (\n    <div className=\"social__list\">\n      {github && (\n        <a href={github} target=\"_blank\" rel=\"noopener noreferrer\">\n          <span className=\"icon-github\" />\n        </a>\n      )}\n      {twitter && (\n        <a href={twitter} target=\"_blank\" rel=\"noopener noreferrer\">\n          <span className=\"icon-twitter\" />\n        </a>\n      )}\n    </div>\n  );\n};\n\nexport default SpeakerSocialList;\n","import React from 'react';\nimport classnames from 'classnames';\n\ninterface SectionTitleProps {\n  dark?: boolean;\n  lined?: boolean;\n  h1?: boolean;\n  small?: boolean;\n}\n\nconst SectionTitle: React.ComponentType<SectionTitleProps> = ({\n  children,\n  dark = false,\n  lined = false,\n  h1 = false,\n  small = false,\n}) => (\n  <div className={classnames('conf__section-title', { dark, small })}>\n    {h1 ? <h1 className=\"h2 title__layer\">{children}</h1> : <h2 className=\"title__layer\">{children}</h2>}\n    <div className={classnames('h2', { lined })}>{children}</div>\n  </div>\n);\n\nexport default SectionTitle;\n"],"sourceRoot":""}